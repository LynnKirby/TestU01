#!/usr/bin/env python3
# SPDX-License-Identifier: CC0-1.0
# SPDX-FileCopyrightText: 2020 Lynn Kirby

from pathlib import Path
import re
import sys
from typing import List


_ignore_test_files = [
    'test_runner.c'
]

_test_runner_template = '''\
/* This file is automatically generated. Do not edit! */
#include "test.h"

%(externs)s

int main(void) {
    const struct CMUnitTest tests[] = {
%(structs)s
    };
    return cmocka_run_group_tests(tests, NULL, NULL);
}
'''


def make_test_runner_file(test_names: List[str]) -> str:
    externs = '\n'.join(
        [f'extern void test_{n}(void **);' for n in test_names])
    structs = ',\n'.join(
        [f'        {{ "{n}", test_{n}, NULL, NULL, NULL }}' for n in test_names])
    return _test_runner_template % { 'externs': externs, 'structs': structs }


def get_test_names(files: List[Path]) -> List[str]:
    names = []

    for p in files:
        with p.open() as f:
            for line in f:
                match = re.match(r'TEST\((?P<name>\w+)\)', line)
                if match:
                    names.append(match.group('name'))

    return names


def get_test_files() -> List[Path]:
    files = []

    with Path('test_files.cmake').open() as f:
        for line in f:

            match = re.match(r'^tu01_add_test_file\((?P<file>.+)\)$', line)
            if match:
                files.append(Path(match.group('file')))

    return files


def main() -> int:
    test_files = get_test_files()
    test_names = get_test_names(test_files)
    runner_source = make_test_runner_file(test_names)

    p = Path(sys.argv[1])
    p.write_text(runner_source)

    return 0

if __name__ == '__main__':
    sys.exit(main())
